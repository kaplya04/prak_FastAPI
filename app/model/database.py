from datetime import datetimefrom sqlalchemy import Column, String, Boolean, TIMESTAMP, Integer, ForeignKeyfrom sqlalchemy.ext.asyncio import create_async_engine, SQLAlchemyBaseUserTable, AsyncSessionfrom sqlalchemy.ext.declarative import DeclarativeMeta, declarative_basefrom sqlalchemy.orm import sessionmakerfrom app.model.core import comicfrom config import DB_HOST, DB_NAME, DB_PASS, DB_USER, DB_PORTfrom typing import AsyncGeneratorDATABASE_URL = f"postgresql+asyncpg://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}"Base: DeclarativeMeta = declarative_base()class User(SQLAlchemyBaseUserTable[int], Base):    id = Column(Integer, primary_key=True)    email = Column(String, nullable=False)    name = Column(String, nullable=False)    password = Column(String, nullable=False)    registered_at = Column(TIMESTAMP, default=datetime)    comic_id = Column('comic_id', Integer, ForeignKey(comic.c.id))    hashed_password: str = Column(String(length=1024), nullable=False)    is_active: bool = Column(Boolean, default=True, nullable=False)    is_superuser: bool = Column(Boolean, default=True, nullable=False)    is_verified: bool = Column(Boolean, default=True, nullable=False)engine = create_async_engine(DATABASE_URL)async_session_maker = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)